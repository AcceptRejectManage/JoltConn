/*
 * This source file was generated by the Gradle 'init' task
 */
package joltconnlib;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandler;
import java.nio.file.Files;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.HexFormat;
import java.util.List;

import com.badlogic.gdx.utils.JsonReader;
import com.badlogic.gdx.utils.JsonValue;
import com.github.raeleus.gamejoltapi.GameJoltRequest;
import com.github.raeleus.gamejoltapi.GameJoltDataStore.DataStoreFetchRequest;
import com.github.raeleus.gamejoltapi.GameJoltDataStore.DataStoreGetKeysRequest;

public class JoltStorage {
    
    private static final String GameJoltSite = "https://api.gamejolt.com/api/game/";
    private static final String GameJoltVersion = "v1_2";
    private final MessageDigest sha;
    private static String GameKey = "";
    private static String GameID = "";

    private String GetRawUrl(GameJoltRequest r) {
        return GameJoltSite + GameJoltVersion + r.toString();
    }

    private URI GetEncodedUrl(String rawUrl) throws URISyntaxException {
        String signature = HexFormat.of().formatHex(sha.digest((rawUrl+GameKey).getBytes()));
        URI uri = new URI(rawUrl + "&signature=" + signature);
        return uri;
    }

    public JoltStorage() {
        MessageDigest temp;
        try{
            temp = MessageDigest.getInstance("SHA-1");
        } catch (Exception e) {
            temp = null;
            e.printStackTrace();
        }
        sha = temp;
    }
    public static void setGameState(String GameKey, String GameID) {
        JoltStorage.GameKey = GameKey;
        JoltStorage.GameID = GameID;
        
    }

    public static void setGameStateFromFile(File path, String gameName) {

        if (path.isFile()) {
            try {
                String jsonString = Files.readString(path.toPath());
                JsonReader reader = new JsonReader();
                JsonValue json = reader.parse(jsonString).get(gameName);
                if (json != null) {
                    String key = json.getString("GameKey");
                    String id = json.getString("GameID");
                    setGameState(key, id);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public String performRequest(String path) {
        
        try{    
            
            URI uri = GetEncodedUrl(path);
            HttpRequest r = HttpRequest.newBuilder().uri(uri).GET().build();
            BodyHandler<String> bh = HttpResponse.BodyHandlers.ofString();
            HttpResponse<String> response = HttpClient.newHttpClient().send(r, bh);
            return response.body();
            
        } catch (URISyntaxException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return "";
    }

    public void parseDirectory() {

        List<String> webFiles = new ArrayList<String>();

        String keysRequestAsJsonStr = performRequest( GetRawUrl(DataStoreGetKeysRequest.builder().gameID(GameID).build()));
        JsonReader reader = new JsonReader();
        JsonValue json = reader.parse(keysRequestAsJsonStr);
        JsonValue keysArray = json.get("response").get("keys");
        if (keysArray != null && keysArray.child() != null) {
            for (JsonValue key = keysArray.child; key != null; key = key.next) {
                String keyLabel = key.getString("key");
                webFiles.add(keyLabel);
                String keyJson = performRequest( GetRawUrl(DataStoreFetchRequest.builder().gameID(GameID).key(keyLabel).build()));

                JsonValue result = reader.parse(keyJson);
                String keyData = result.get("response").getString("data");

                System.out.println(keyData);
            }
        }
    }
}
